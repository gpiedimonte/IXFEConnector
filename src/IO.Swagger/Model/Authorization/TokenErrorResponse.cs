/* 
 * OAuth API V2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model.Authorization
{
    /// <summary>
    /// TokenErrorResponse
    /// </summary>
    [DataContract]
    public partial class TokenErrorResponse :  IEquatable<TokenErrorResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Error
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorEnum
        {
            
            /// <summary>
            /// Enum Invalidrequest for value: invalid_request
            /// </summary>
            [EnumMember(Value = "invalid_request")]
            Invalidrequest = 1,
            
            /// <summary>
            /// Enum Invalidclient for value: invalid_client
            /// </summary>
            [EnumMember(Value = "invalid_client")]
            Invalidclient = 2,
            
            /// <summary>
            /// Enum Invalidgrant for value: invalid_grant
            /// </summary>
            [EnumMember(Value = "invalid_grant")]
            Invalidgrant = 3,
            
            /// <summary>
            /// Enum Unauthorizedclient for value: unauthorized_client
            /// </summary>
            [EnumMember(Value = "unauthorized_client")]
            Unauthorizedclient = 4,
            
            /// <summary>
            /// Enum Unsupportedgranttype for value: unsupported_grant_type
            /// </summary>
            [EnumMember(Value = "unsupported_grant_type")]
            Unsupportedgranttype = 5,
            
            /// <summary>
            /// Enum Unsupportedresponsetype for value: unsupported_response_type
            /// </summary>
            [EnumMember(Value = "unsupported_response_type")]
            Unsupportedresponsetype = 6,
            
            /// <summary>
            /// Enum Invalidscope for value: invalid_scope
            /// </summary>
            [EnumMember(Value = "invalid_scope")]
            Invalidscope = 7,
            
            /// <summary>
            /// Enum Accessdenied for value: access_denied
            /// </summary>
            [EnumMember(Value = "access_denied")]
            Accessdenied = 8
        }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public ErrorEnum Error { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenErrorResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenErrorResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenErrorResponse" /> class.
        /// </summary>
        /// <param name="Error">Error (required).</param>
        /// <param name="ErrorDescription">ErrorDescription.</param>
        /// <param name="ErrorUri">ErrorUri.</param>
        public TokenErrorResponse(ErrorEnum Error = default(ErrorEnum), string ErrorDescription = default(string), string ErrorUri = default(string))
        {
            // to ensure "Error" is required (not null)
            if (Error == null)
            {
                throw new InvalidDataException("Error is a required property for TokenErrorResponse and cannot be null");
            }
            else
            {
                this.Error = Error;
            }
            this.ErrorDescription = ErrorDescription;
            this.ErrorUri = ErrorUri;
        }
        

        /// <summary>
        /// Gets or Sets ErrorDescription
        /// </summary>
        [DataMember(Name="error_description", EmitDefaultValue=false)]
        public string ErrorDescription { get; set; }

        /// <summary>
        /// Gets or Sets ErrorUri
        /// </summary>
        [DataMember(Name="error_uri", EmitDefaultValue=false)]
        public string ErrorUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenErrorResponse {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ErrorDescription: ").Append(ErrorDescription).Append("\n");
            sb.Append("  ErrorUri: ").Append(ErrorUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenErrorResponse);
        }

        /// <summary>
        /// Returns true if TokenErrorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenErrorResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.ErrorDescription == input.ErrorDescription ||
                    (this.ErrorDescription != null &&
                    this.ErrorDescription.Equals(input.ErrorDescription))
                ) && 
                (
                    this.ErrorUri == input.ErrorUri ||
                    (this.ErrorUri != null &&
                    this.ErrorUri.Equals(input.ErrorUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.ErrorDescription != null)
                    hashCode = hashCode * 59 + this.ErrorDescription.GetHashCode();
                if (this.ErrorUri != null)
                    hashCode = hashCode * 59 + this.ErrorUri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
